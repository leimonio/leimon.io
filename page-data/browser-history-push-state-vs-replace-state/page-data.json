{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/browser-history-push-state-vs-replace-state","result":{"data":{"post":{"__typename":"MdxPost","slug":"/browser-history-push-state-vs-replace-state","title":"Browser history pushState vs replaceState","date":"11.02.2020","tags":null,"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Browser history pushState vs replaceState\",\n  \"date\": \"2020-02-11T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"History API\"), mdx(\"h2\", null, \"When to use pushState vs replaceState\"), mdx(\"hr\", null), mdx(\"h3\", null, \"History API\"), mdx(\"p\", null, \"First things first - History API, is a browser interface for wonderful people to manipulate the browser's history programmatically.\"), mdx(\"h3\", null, \"Why do we need that?\"), mdx(\"p\", null, \"A common use case for utilising History API is the Single Page Applications, in which content of the webpage is dynamically changed. We need to be able to represent content changes in the URI by making them navigable.\"), mdx(\"p\", null, \"History API provides some methods for navigating:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to pages already existing in the browser history - \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"forward()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"back()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"go()\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to new pages by updating the browser history: - \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pushState\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"replaceState\"), \".\")), mdx(\"h4\", null, \"pushState\"), mdx(\"p\", null, \"will add a new page in the browser's history.\"), mdx(\"h4\", null, \"replaceState\"), mdx(\"p\", null, \"will entirely replace and override the current page state or/and url.\"), mdx(\"h4\", null, \"pushState VS replaceState\"), mdx(\"p\", null, \"There is not a silver bullet when you should use each of this function. It all depends on the experience you want the users of your application to have. Simply ask yourself \\\"Do I need to navigate in the previous page when clicking the back button?\\\". If the answer is positive, then you need to replace the last state in the history of the browser aka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"replaceState\"), \" . Otherwise, you'd navigate to the last piece of content the user has interacted with on the same page. And as such, push a new state to the history of the browser aka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pushState\"), \".\"), mdx(\"h3\", null, \"Compared to window.location\"), mdx(\"p\", null, \"Before History API, the only way to manipulate browser's location was by setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.location\"), \" attribute to a new web address. Unfortunately this was quite limiting due to the resulted full page reload. The only exception in triggering this full page reload, is when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.hash\"), \" attribute was changed.\"), mdx(\"p\", null, \"History API can modify the URL without that full page reload and offer a more straight forward way to navigate, and alternate the browser history status.\"), mdx(\"h3\", null, \"Compatibility\"), mdx(\"p\", null, \"Not much to wonder about, there is really good support from the browsers. Even on IE10.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"History API When to use pushState vs replaceState History API First things first - History API, is a browser interface for wonderful peopleâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/browser-history-push-state-vs-replace-state","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}